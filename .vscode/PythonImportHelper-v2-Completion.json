[
    {
        "label": "streamlit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "streamlit",
        "description": "streamlit",
        "detail": "streamlit",
        "documentation": {}
    },
    {
        "label": "session_state",
        "importPath": "streamlit",
        "description": "streamlit",
        "isExtraImport": true,
        "detail": "streamlit",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "dotenv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dotenv",
        "description": "dotenv",
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "ZipFile",
        "importPath": "zipfile",
        "description": "zipfile",
        "isExtraImport": true,
        "detail": "zipfile",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "phe",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "phe",
        "description": "phe",
        "detail": "phe",
        "documentation": {}
    },
    {
        "label": "paillier",
        "importPath": "phe",
        "description": "phe",
        "isExtraImport": true,
        "detail": "phe",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "init_connection",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def init_connection():\n    MONGO_URI = os.getenv(\"MONGO_URI\")\n    return MongoClient(MONGO_URI)\nclient = init_connection()\ndb = client[\"encrypted_data\"]\nusers_collection = db[\"user_data\"]\nsession_state = st.session_state\nif \"user_index\" not in st.session_state:\n    st.session_state[\"user_index\"] = 0\ndef keypair_dump_jwk(pub, priv, date=None):",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "keypair_dump_jwk",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def keypair_dump_jwk(pub, priv, date=None):\n    \"\"\"Serializer for public-private keypair, to JWK format.\"\"\"\n    from datetime import datetime\n    if date is None:\n        date = datetime.now().strftime('%Y-%m-%dT%H:%M:%S')\n    rec_pub = {\n        'kty': 'DAJ',\n        'alg': 'PAI-GN1',\n        'key_ops': ['encrypt'],\n        'n': phe.util.int_to_base64(pub.n),",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "keypair_load_jwk",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def keypair_load_jwk(pub_jwk, priv_jwk):\n    \"\"\"Deserializer for public-private keypair, from JWK format.\"\"\"\n    rec_pub = json.loads(pub_jwk)\n    rec_priv = json.loads(priv_jwk)\n    # Do some basic checks                                                                                                                                                      \n    assert rec_pub['kty'] == \"DAJ\", \"Invalid public key type\"\n    assert rec_pub['alg'] == \"PAI-GN1\", \"Invalid public key algorithm\"\n    assert rec_priv['kty'] == \"DAJ\", \"Invalid private key type\"\n    pub_n = phe.util.base64_to_int(rec_pub['n'])\n    pub = paillier.PaillierPublicKey(pub_n)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "envec_dump_json",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def envec_dump_json(pubkey, enc_vals, indent=None):\n    \"\"\"Serializes a vector of encrypted numbers into a simple JSON format.\"\"\"\n    from phe.util import int_to_base64\n    R = {}\n    R['public_key'] = {\n        'n': int_to_base64(pubkey.n),\n    }\n    R['values'] = [\n        (int_to_base64(x.ciphertext()), x.exponent) for x in enc_vals\n    ]",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "envec_load_json",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def envec_load_json(R_json):\n    \"\"\"Deserializes a vector of encrypted numbers.\"\"\"\n    from phe.util import base64_to_int\n    R = json.loads(R_json)\n    R_pubkey = R['public_key']\n    R_values = R['values']\n    # deserialized values:\n    pubkey_d = paillier.PaillierPublicKey(n=base64_to_int(R_pubkey['n']))\n    values_d = [\n        paillier.EncryptedNumber(pubkey_d, ciphertext=base64_to_int(v[0]), exponent=int(v[1]))",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "generate_keypair",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def generate_keypair():\n    return paillier.generate_paillier_keypair()\ndef encrypt_message(public_key, message):\n    return public_key.encrypt(message)\ndef decrypt_message(private_key, encrypted_message):\n    return private_key.decrypt(encrypted_message)\ndef add_encrypted_messages(encrypted_message1, encrypted_message2):\n    return encrypted_message1 + encrypted_message2\ndef mean(df, column):\n    li = df[column].iloc[0]",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "encrypt_message",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def encrypt_message(public_key, message):\n    return public_key.encrypt(message)\ndef decrypt_message(private_key, encrypted_message):\n    return private_key.decrypt(encrypted_message)\ndef add_encrypted_messages(encrypted_message1, encrypted_message2):\n    return encrypted_message1 + encrypted_message2\ndef mean(df, column):\n    li = df[column].iloc[0]\n    for i in range(1, len(df[column])):\n        li = li + df[column].iloc[i]",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "decrypt_message",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def decrypt_message(private_key, encrypted_message):\n    return private_key.decrypt(encrypted_message)\ndef add_encrypted_messages(encrypted_message1, encrypted_message2):\n    return encrypted_message1 + encrypted_message2\ndef mean(df, column):\n    li = df[column].iloc[0]\n    for i in range(1, len(df[column])):\n        li = li + df[column].iloc[i]\n    return (li/len(df[column]))\ndef summation(df, column):",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "add_encrypted_messages",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def add_encrypted_messages(encrypted_message1, encrypted_message2):\n    return encrypted_message1 + encrypted_message2\ndef mean(df, column):\n    li = df[column].iloc[0]\n    for i in range(1, len(df[column])):\n        li = li + df[column].iloc[i]\n    return (li/len(df[column]))\ndef summation(df, column):\n    li = df[column].iloc[0]\n    for i in range(1, len(df[column])):",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "mean",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def mean(df, column):\n    li = df[column].iloc[0]\n    for i in range(1, len(df[column])):\n        li = li + df[column].iloc[i]\n    return (li/len(df[column]))\ndef summation(df, column):\n    li = df[column].iloc[0]\n    for i in range(1, len(df[column])):\n        li = li + df[column].iloc[i]\n    return li",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "summation",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def summation(df, column):\n    li = df[column].iloc[0]\n    for i in range(1, len(df[column])):\n        li = li + df[column].iloc[i]\n    return li\ndef weighted_average(df, column):\n    li = df[column].iloc[0]\n    for i in range(1, len(df[column])):\n        li = li + (df[column].iloc[i] * (i+1))\n    sum_ = (len(df[column])*(len(df[column])+1))/2",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "weighted_average",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def weighted_average(df, column):\n    li = df[column].iloc[0]\n    for i in range(1, len(df[column])):\n        li = li + (df[column].iloc[i] * (i+1))\n    sum_ = (len(df[column])*(len(df[column])+1))/2\n    return (li/sum_)\ndef signup():\n    st.title(\"Signup Page\")\n    with st.form(\"signup_form\"):\n        st.write(\"Fill in the details below to create an account:\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def signup():\n    st.title(\"Signup Page\")\n    with st.form(\"signup_form\"):\n        st.write(\"Fill in the details below to create an account:\")\n        name = st.text_input(\"Name:\")\n        email = st.text_input(\"Email:\")\n        age = st.number_input(\"Age:\", min_value=0, max_value=120)\n        sex = st.radio(\"Sex:\", (\"Male\", \"Female\", \"Other\"))\n        password = st.text_input(\"Password:\", type=\"password\")\n        confirm_password = st.text_input(\"Confirm Password:\", type=\"password\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "check_login",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def check_login(username, password):\n    user = users_collection.find_one({\"email\": username, \"password\": password})\n    if user:\n        session_state[\"logged_in\"] = True\n        session_state[\"user_info\"] = user\n        st.success(\"Login successful!\")\n        return user\n    else:\n        st.error(\"Invalid credentials. Please try again.\")\n        return None",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "initialize_database",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def initialize_database():\n    try:\n        if \"users\" not in db.list_collection_names():\n            db.create_collection(\"users\")\n    except Exception as e:\n        print(f\"Error initializing database: {e}\")\ndef create_account(name, email, age, sex, password):\n    try:\n        user_info = {\n            \"name\": name,",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "create_account",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def create_account(name, email, age, sex, password):\n    try:\n        user_info = {\n            \"name\": name,\n            \"email\": email,\n            \"age\": age,\n            \"sex\": sex,\n            \"password\": password,\n            \"files\": None,\n        }",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def login():\n    st.title(\"Login Page\")\n    username = st.text_input(\"Email:\")\n    password = st.text_input(\"Password:\", type=\"password\")\n    login_button = st.button(\"Login\")\n    if login_button:\n        user = check_login(username, password)\n        if user is not None:\n            session_state[\"logged_in\"] = True\n            session_state[\"user_info\"] = user",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "render_dashboard",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def render_dashboard(user_info):\n    try:\n        st.title(f\"Welcome to the Dashboard, {user_info['name']}!\")\n        st.subheader(\"User Information:\")\n        st.write(f\"Name: {user_info['name']}\")\n        st.write(f\"Sex: {user_info['sex']}\")\n        st.write(f\"Age: {user_info['age']}\")\n        st.image(\"image.jpg\", use_column_width=True)\n    except Exception as e:\n        st.error(f\"Error rendering dashboard: {e}\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def main():\n    st.title(\"Privacy-Preserving Data Analysis\")\n    page = st.sidebar.radio(\n        \"Go to\",\n        (\"Signup/Login\", \"Dashboard\", \"File Upload\", \"Statistical Analysis\"),\n        key=\"Pages\",\n    )\n    if page == \"Signup/Login\":\n        st.title(\"Signup/Login Page\")\n        login_or_signup = st.radio(",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "client = init_connection()\ndb = client[\"encrypted_data\"]\nusers_collection = db[\"user_data\"]\nsession_state = st.session_state\nif \"user_index\" not in st.session_state:\n    st.session_state[\"user_index\"] = 0\ndef keypair_dump_jwk(pub, priv, date=None):\n    \"\"\"Serializer for public-private keypair, to JWK format.\"\"\"\n    from datetime import datetime\n    if date is None:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "db = client[\"encrypted_data\"]\nusers_collection = db[\"user_data\"]\nsession_state = st.session_state\nif \"user_index\" not in st.session_state:\n    st.session_state[\"user_index\"] = 0\ndef keypair_dump_jwk(pub, priv, date=None):\n    \"\"\"Serializer for public-private keypair, to JWK format.\"\"\"\n    from datetime import datetime\n    if date is None:\n        date = datetime.now().strftime('%Y-%m-%dT%H:%M:%S')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "users_collection",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "users_collection = db[\"user_data\"]\nsession_state = st.session_state\nif \"user_index\" not in st.session_state:\n    st.session_state[\"user_index\"] = 0\ndef keypair_dump_jwk(pub, priv, date=None):\n    \"\"\"Serializer for public-private keypair, to JWK format.\"\"\"\n    from datetime import datetime\n    if date is None:\n        date = datetime.now().strftime('%Y-%m-%dT%H:%M:%S')\n    rec_pub = {",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "session_state",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "session_state = st.session_state\nif \"user_index\" not in st.session_state:\n    st.session_state[\"user_index\"] = 0\ndef keypair_dump_jwk(pub, priv, date=None):\n    \"\"\"Serializer for public-private keypair, to JWK format.\"\"\"\n    from datetime import datetime\n    if date is None:\n        date = datetime.now().strftime('%Y-%m-%dT%H:%M:%S')\n    rec_pub = {\n        'kty': 'DAJ',",
        "detail": "app",
        "documentation": {}
    }
]